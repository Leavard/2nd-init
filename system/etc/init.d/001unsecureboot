#!/system/bin/sh
export PATH=/system/bin:/sbin:$PATH
SRC=/system/bootstrap/
BB=/system/xbin/busybox
STOP=$SRC/stop

if $BB [ -f /.bootstamp ]; then
  exit 0
fi

if $BB [ -f $STOP ]; then
  # Stop init process
  $STOP 1
fi

$BB mount -o remount,rw rootfs /
$BB killall bootanimation
# mount /data now to get recovery mode detection working
$BB mount -t ext4 /dev/block/platform/omap/omap_hsmmc.1/by-name/userdata /data -o nosuid,nodev,barrier=1,noauto_da_alloc

# copy busybox
$BB cp $BB /sbin
# minimal symlinks
$BB ln -s $BB /sbin/cp
$BB ln -s $BB /sbin/[

BB=/sbin/busybox

# touch stamp to prevent loop execution
$BB touch /.bootstamp

#
# check mode
#
TYPE=normal
if $BB [ -f /data/.recovery_mode ]; then
  TYPE=recovery
else
  key=
  if $BB [ -e /system/bootstrap/getkey ]; then
    key=$(/system/bootstrap/getkey)
  fi
  if $BB [ "$key" = 115 ]; then
    TYPE=recovery
  fi
fi

# remove recoverymode trigger and unmount data again
$BB rm /data/.recovery_mode
$BB umount /data

# Continue init process
$BB kill -CONT 1

# no boot.tar - stock rom
if $BB [ "$TYPE" = "normal" ] && $BB [ ! -f /system/bootstrap/boot.tar ] ; then
  exit 0
fi

# remove symbolic links
$BB rm sdcard

#
# remove lg crap
#
$BB rm /*.rc
$BB rm /*.sh

#
# volume down - recovery mode
#
if $BB [ "$TYPE" = "recovery" ]; then
  # unlink /etc
  $BB rm /etc
  $BB mkdir /etc

  $BB cp -fr /system/bootstrap/recovery.tar /
  $BB tar xf /recovery.tar

  if [ ! -z "$restart_adb" ]; then
    $BB killall adbd
  fi
  $BB killall ueventd
  
  $BB mkdir /tmp
  $BB mkdir /cache
  $BB mkdir /sdcard
  $BB chmod 666 /dev/graphics/fb*

  $BB mount -o remount,rw /system /system
#
# normal mode
#
else
  $BB cp -fr /system/bootstrap/boot.tar /
  $BB tar xf /boot.tar

  $BB killall ueventd
fi

# unmount stuff
$BB umount /dev/cpuctl
$BB umount /dev/pts
$BB umount /data
$BB umount /dvp
$BB umount /persist
$BB umount /sys/kernel/debug
$BB umount /system/app
$BB umount /mpt
$BB umount /mnt/asec
$BB umount /mnt/obb
$BB umount /mnt/extasec
$BB umount /mnt/extobb

# set our init only to the first core << check this
/system/bootstrap/taskset -p -c 0 1
/system/bootstrap/taskset -c 0 /system/bootstrap/2nd-init
#/system/bootstrap/2nd-init

exit 0