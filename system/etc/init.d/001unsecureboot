#!/system/bin/sh

if [ -f /.bootstamp ]; then
  exit 0
fi

mount -o remount,rw rootfs /
killall bootanimation
# mount /data now to get recovery mode detection working
mount -t ext4 /dev/block/bootdevice/by-name/userdata /data -o nosuid,nodev,barrier=1,noauto_da_alloc

# touch stamp to prevent loop execution
touch /.bootstamp

#
# check mode
#
TYPE=normal
if [ -f /data/temp/.recovery_mode ]; then
  TYPE=recovery
else
  key=
  if [ -e /system/bootstrap/getkey ]; then
    key=$(/system/bootstrap/getkey)
  fi
  if [ "$key" = 115 ]; then
    TYPE=recovery
  fi
fi

# remove recoverymode trigger and unmount data again
rm /data/temp/.recovery_mode
umount /data

# Continue init process
kill -CONT 1

# no boot.tar - stock rom
if [ "$TYPE" = "normal" ] && [ ! -f /system/bootstrap/boot.tar ] ; then
  exit 0
fi

# remove symbolic links
rm sdcard

#
# remove lg crap
#
rm /*.rc
rm /*.sh

#
# volume down - recovery mode
#
if [ "$TYPE" = "recovery" ]; then
  # unlink /etc
  rm /etc
  mkdir /etc

  cp -fr /system/bootstrap/recovery.tar /
  tar xf /recovery.tar

  if [ ! -z "$restart_adb" ]; then
    killall adbd
  fi
  killall ueventd
  
  mkdir /tmp
  mkdir /cache
  mkdir /sdcard
  chmod 666 /dev/graphics/fb*

  mount -o remount,rw /system /system
#
# normal mode
#
else
  cp -fr /system/bootstrap/boot.tar /
  tar xf /boot.tar

  killall ueventd
fi

# unmount stuff
umount /dev/cpuctl
umount /dev/pts
umount /data
umount /dvp
umount /persist
umount /sys/kernel/debug
umount /system/app
umount /mpt
umount /mnt/asec
umount /mnt/obb
umount /mnt/extasec
umount /mnt/extobb

# set our init only to the first core << check this
/system/bootstrap/taskset -p -c 0 1
/system/bootstrap/taskset -c 0 /system/bootstrap/2nd-init
#/system/bootstrap/2nd-init

exit 0
